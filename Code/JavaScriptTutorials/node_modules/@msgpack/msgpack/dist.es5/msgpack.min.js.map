{"version":3,"sources":["webpack://MessagePack/webpack/universalModuleDefinition","webpack://MessagePack/webpack/bootstrap","webpack://MessagePack/./src/utils/utf8.ts","webpack://MessagePack/./src/ExtData.ts","webpack://MessagePack/./src/utils/int.ts","webpack://MessagePack/./src/timestamp.ts","webpack://MessagePack/./src/ExtensionCodec.ts","webpack://MessagePack/./src/utils/typedArrays.ts","webpack://MessagePack/./src/Encoder.ts","webpack://MessagePack/./src/encode.ts","webpack://MessagePack/./src/utils/prettyByte.ts","webpack://MessagePack/./src/CachedKeyDecoder.ts","webpack://MessagePack/./src/Decoder.ts","webpack://MessagePack/./src/decode.ts","webpack://MessagePack/./src/utils/stream.ts","webpack://MessagePack/./src/decodeAsync.ts","webpack://MessagePack/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TEXT_ENCODING_AVAILABLE","TextEncoder","TextDecoder","utf8Count","str","strLength","length","byteLength","pos","charCodeAt","extra","sharedTextEncoder","undefined","utf8EncodeTE","encodeInto","output","outputOffset","subarray","set","encode","CHUNK_SIZE","utf8DecodeJs","bytes","inputOffset","offset","end","units","result","byte1","push","byte2","byte3","unit","String","fromCharCode","sharedTextDecoder","type","data","setInt64","view","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","Error","decodeTimestampExtension","timeSpec","timestampExtension","decode","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","encoder","ExtData","decoder","defaultCodec","ExtensionCodec","ensureUint8Array","ArrayBuffer","isView","from","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","getUint8Array","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","toString","apply","encodeMap","size","writeU8a","item","keys","sort","setUint8","values","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","defaultEncodeOptions","options","prettyByte","byte","abs","padStart","DEFAULT_MAX_KEY_LENGTH","DEFAULT_MAX_LENGTH_PER_KEY","maxKeyLength","maxLengthPerKey","caches","canBeCached","records","recordsLength","FIND_CHUNK","record","recordBytes","j","store","random","cachedValue","slicedCopyOfBytes","slice","HEAD_BYTE_REQUIRED","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","e","constructor","MORE_DATA","DEFAULT_MAX_LENGTH","sharedCachedKeyDecoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","cachedKeyDecoder","totalPos","headByte","stack","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","concated","createNoExtraBytesError","posToShow","RangeError","decodeSingleSync","decodeSync","decodeSingleAsync","stream","decoded","decodeArrayStream","decodeMultiAsync","decodeStream","isArrayHeaderRequired","arrayItemsLeft","readArraySize","complete","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","array","position","pop","keyType","map","readCount","headerOffset","stateIsMapKey","stringBytes","utf8DecodeTD","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","defaultDecodeOptions","ensureAsyncIterabe","streamLike","asyncIterator","reader","getReader","read","done","releaseLock","asyncIterableFromStream","decodeAsync"],"mappings":"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","file":"msgpack.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MessagePack\"] = factory();\n\telse\n\t\troot[\"MessagePack\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const TEXT_ENCODING_AVAILABLE =\n  process.env.TEXT_ENCODING !== \"never\" && typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = process.env.TEXT_ENCODING !== \"force\" ? 200 : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      const byte4 = bytes[offset++] & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = process.env.TEXT_DECODER !== \"force\" ? 200 : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return sharedTextDecoder!.decode(stringBytes);\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n","// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number) {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number) {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType = (data: Uint8Array, extensionType: number) => unknown;\n\nexport type ExtensionEncoderType = (input: unknown) => Uint8Array | null;\n\n// immutable interfce to ExtensionCodec\nexport type ExtensionCodecType = {\n  tryToEncode(object: unknown): ExtData | null;\n  decode(data: Uint8Array, extType: number): unknown;\n};\n\nexport class ExtensionCodec implements ExtensionCodecType {\n  public static readonly defaultCodec: ExtensionCodecType = new ExtensionCodec();\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType> = [];\n  private readonly decoders: Array<ExtensionDecoderType> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType;\n    decode: ExtensionDecoderType;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encoder = this.builtInEncoders[i];\n      if (encoder != null) {\n        const data = encoder(object);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encoder = this.encoders[i];\n      if (encoder != null) {\n        const data = encoder(object);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number): unknown {\n    const decoder = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decoder) {\n      return decoder(data, type);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer) {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","import { utf8EncodeJs, utf8Count, TEXT_ENCODING_AVAILABLE, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  constructor(\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\n    readonly maxDepth = DEFAULT_MAX_DEPTH,\n    readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    readonly sortKeys = false,\n    readonly forceFloat32 = false,\n  ) {}\n\n  encode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  getUint8Array(): Uint8Array {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  encodeNumber(object: number) {\n    if (Number.isSafeInteger(object)) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // nagative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (TEXT_ENCODING_AVAILABLE && strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.encode(item, depth + 1);\n    }\n  }\n\n  encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n    const size = keys.length;\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (let i = 0; i < size; i++) {\n      const key = keys[i];\n      this.encodeString(key);\n      this.encode(object[key], depth + 1);\n    }\n  }\n\n  encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Encoder } from \"./Encoder\";\n\nexport type EncodeOptions = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType;\n    maxDepth: number;\n    initialBufferSize: number;\n    sortKeys: boolean;\n\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     */\n    forceFloat32: boolean;\n  }>\n>;\n\nconst defaultEncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode(value: unknown, options: EncodeOptions = defaultEncodeOptions): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n  );\n  encoder.encode(value, 1);\n  return encoder.getUint8Array();\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte)\n    .toString(16)\n    .padStart(2, \"0\")}`;\n}\n","import { utf8DecodeJs } from \"./utils/utf8\";\n\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly value: string;\n}\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport class CachedKeyDecoder {\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)` to create a non-sparse array for performance.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number) {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private get(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1];\n    const recordsLength = records.length;\n\n    FIND_CHUNK: for (let i = 0; i < recordsLength; i++) {\n      const record = records[i];\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.value;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1];\n    const record: KeyCacheRecord = { bytes, value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to a randomized position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.get(bytes, inputOffset, byteLength);\n    if (cachedValue) {\n      return cachedValue;\n    }\n\n    const value = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, value);\n    return value;\n  }\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nimport { getInt64, getUint64 } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_ENCODING_AVAILABLE, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder } from \"./CachedKeyDecoder\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst DEFAULT_MAX_LENGTH = 0xffff_ffff; // uint32_max\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder {\n  totalPos = 0;\n  pos = 0;\n\n  view = EMPTY_VIEW;\n  bytes = EMPTY_BYTES;\n  headByte = HEAD_BYTE_REQUIRED;\n  readonly stack: Array<StackState> = [];\n\n  constructor(\n    readonly extensionCodec = ExtensionCodec.defaultCodec,\n    readonly maxStrLength = DEFAULT_MAX_LENGTH,\n    readonly maxBinLength = DEFAULT_MAX_LENGTH,\n    readonly maxArrayLength = DEFAULT_MAX_LENGTH,\n    readonly maxMapLength = DEFAULT_MAX_LENGTH,\n    readonly maxExtLength = DEFAULT_MAX_LENGTH,\n    readonly cachedKeyDecoder: CachedKeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  setBuffer(buffer: ArrayLike<number> | ArrayBuffer): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  appendBuffer(buffer: ArrayLike<number>) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\n      this.setBuffer(buffer);\n    } else {\n      // retried because data is insufficient\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n      const concated = new Uint8Array(remainingData.length + newData.length);\n      concated.set(remainingData);\n      concated.set(newData, remainingData.length);\n      this.setBuffer(concated);\n    }\n  }\n\n  hasRemaining(size = 1) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  createNoExtraBytesError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  decodeSingleSync(): unknown {\n    const object = this.decodeSync();\n    if (this.hasRemaining()) {\n      throw this.createNoExtraBytesError(this.pos);\n    }\n    return object;\n  }\n\n  async decodeSingleAsync(stream: AsyncIterable<ArrayLike<number>>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.decodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining()) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parcing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  decodeArrayStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  decodeStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number>>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createNoExtraBytesError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.decodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  decodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new Error(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1];\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new Error(\"The type of key must be string or number but \" + typeof object);\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else if (state.type === State.MAP_VALUE) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new Error(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.cachedKeyDecoder?.canBeCached(byteLength)) {\n      object = this.cachedKeyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (TEXT_ENCODING_AVAILABLE && byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1];\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType);\n  }\n\n  lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Decoder } from \"./Decoder\";\n\nexport type DecodeOptions = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType;\n\n    /**\n     * Maximum string length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a MessagePack-encoded buffer.\n *\n * This is a synchronous decoding function. See other variants for asynchronous decoding: `decodeAsync()`, `decodeStream()`, `decodeArrayStream()`.\n */\nexport function decode(\n  buffer: ArrayLike<number> | ArrayBuffer,\n  options: DecodeOptions = defaultDecodeOptions,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  decoder.setBuffer(buffer); // decodeSync() requires only one buffer\n  return decoder.decodeSingleSync();\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: object): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterabe<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { defaultDecodeOptions, DecodeOptions } from \"./decode\";\nimport { ensureAsyncIterabe, ReadableStreamLike } from \"./utils/stream\";\n\nexport type DecodeAsyncOptions = DecodeOptions;\nexport const defaultDecodeAsyncOptions = defaultDecodeOptions;\n\nexport async function decodeAsync(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n): Promise<unknown> {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeSingleAsync(stream);\n}\n\nexport function decodeArrayStream(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\nexport function decodeStream(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeAsyncOptions = defaultDecodeOptions,\n) {\n  const stream = ensureAsyncIterabe(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n","// Main Functions:\n\nexport { encode } from \"./encode\";\nexport { decode } from \"./decode\";\nexport { decodeAsync, decodeArrayStream, decodeStream } from \"./decodeAsync\";\n\n/**\n * @experimental `Decoder` is exported for experimental use.\n */\nexport { Decoder } from \"./Decoder\";\n\n/**\n * @experimental `Encoder` is exported for experimental use.\n */\nexport { Encoder } from \"./Encoder\";\n\n// Utilitiies for Extension Types:\n\nexport { ExtensionCodec, ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType } from \"./ExtensionCodec\";\nexport { ExtData } from \"./ExtData\";\nexport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n} from \"./timestamp\";\n"],"sourceRoot":""}